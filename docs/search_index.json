[
["development.html", "Chapter 5 Development Practices 5.1 Package Development 5.2 Version Control 5.3 Managing Package Dependencies", " Chapter 5 Development Practices 5.1 Package Development If you have functions or code that is used across projects then the best practice is to build a package. A package combines a set of related functionality which can then be shared easily between projects and other users. The package devtools makes package development straight forward. For more detailed information about creating packages, read the R Packages book or use the cheatsheet below for reference. NOTE: devtools is currently being split up into smaller packages and the above book and cheatsheet are slightly out of date. Package development has a formal structure, which addresses many of the areas detailed in the End-User Computing standards. The package usethis provides functions to ease the setup of the package structure. To set up an empty package use: usethis::create_package(&quot;pkgname&quot;) Functions you wish to add to the package are saved in scripts in the R subfolder that has been created. 5.1.1 Documentation Documentation comes in three flavours in an R package. The DESCRIPTION file details the package itself including author and dependencies; help files contains documentation for each function in the package; and vignettes are small articles describing how to use the functions in practice. 5.1.1.1 DESCRIPTION The function usethis::create_package() creates the basic structure of the package and a placeholder DESCRIPTION file. You can then edit it manually or use other functions in the usethis package to update it. For more detail, read the Package metadata chapter in the R Packages book. 5.1.1.2 Help Files When writing a function in a package it is good practice to document it, so a user can see how it works with help(\"function_name\"). Documenting a package is as straight forward as including a special commented section before the function definition. The package roxygen2 is then used to convert those comments into help files. For more detail, read the Object documentation chapter in the R Packages book. 5.1.1.3 Vignettes When writing a package, it is also good practice to write a short article explaining how to use it. If the package is complex it may require a number articles describing different aspects. These short articles are called vignettes. Vignettes are written in markdown format and stored in a vignettes subfolder. For more detail, read the Vignettes chapter in the R Packages book. 5.1.2 Testing R packages provide a structure for specifying tests that allows you easily re-run all tests and determine whether something has broken. The package testthat provides functions for specifying tests and comparing the results with expectations. For more detail, read the Testing chapter in the R Packages book. 5.2 Version Control 5.2.1 Git 5.2.2 Git Flow 5.2.3 GitHub Flow 5.3 Managing Package Dependencies "]
]
